---
- name: setting up timestamp
  hosts: [localhost]
  connection: local
  gather_facts: yes
  
  vars:
    systime: "{{ansible_date_time.time | replace(':', '-')}}"

  tasks:
    - debug: var=ansible_date_time.time
    - debug: var=systime

    - name: Creating the timestamp variable
      set_fact:                                           #save variable for the next play -- like global variable
        timestamp: "{{ansible_date_time.date}}_{{systime}}"  


- name: Backing up device's configuration
  roles:
    - Juniper.junos
  hosts: 
    - srx210-1
    - srx210-2
  connection: local
  gather_facts: no

  vars:
    #moved to group_vars as user_data_path: ~/automation/ansible 
    backup_dir: "{{ user_data_path }}/backups"  
    backup_conf_file: "{{backup_dir}}/{{inventory_hostname}}__{{hostvars.localhost.timestamp}}.conf"
    connection_settings:
      host: "{{ansible_host}}"
      passwd: "{{ansible_ssh_pass}}"
      user: "{{ansible_user}}"

  tasks:
    - debug: var=backup_dir
    - debug: var=user_data_path
    - debug: var=backup_conf_file
    
    - name: Confirm and create directory
      file: 
        path: "{{backup_dir}}" 
        state: 'directory'
      run_once: yes  #Bool that will bypass the host loop, forcing the task to attempt to execute on the first host available and afterwards apply any results and facts to all active hosts in the same batch.
      delegate_to: 'localhost'  #checking or creating a directory on the local file system - to be executed on the localhost, not on the network device being processed.

    - name: Saving the Configuration to the file "{{backup_dir}}"
      juniper_junos_config:
        retrieve: 'committed'
        dest: "{{backup_conf_file}}"
        provider: "{{connection_settings}}"
        format: text

    - name: 
      debug:
        msg: "The configuration backup is in {{ backup_conf_file }}"
